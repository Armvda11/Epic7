/**
 * Test RTA avec connexion WebSocket r√©elle au backend
 * Test des 3 corrections avec le serveur Epic7 en cours d'ex√©cution
 */

class RealRtaConnectionTest {
    constructor() {
        this.backendUrl = 'ws://localhost:8080/ws';
        this.socket = null;
        this.testResults = [];
        this.herm√°sUserId = 2; // Exact seeder config
        this.aryaUserId = 3;   // Exact seeder config
        this.testStartTime = null;
        this.connectionEstablished = false;
    }

    /**
     * Test complet avec vraie connexion WebSocket
     */
    async runRealConnectionTest() {
        this.testStartTime = Date.now();
        console.log('üåê D√©but du test avec connexion WebSocket r√©elle');
        console.log(`üì° Tentative de connexion √†: ${this.backendUrl}`);
        
        try {
            // Test 1: √âtablir la connexion
            await this.establishConnection();
            
            // Test 2: Test d'authentification
            await this.testAuthentication();
            
            // Test 3: Test des corrections avec vraies donn√©es
            await this.testRealCorrections();
            
            // Test 4: Test de d√©connexion/reconnexion
            await this.testReconnection();
            
            this.displayResults();
            
        } catch (error) {
            console.error('‚ùå Erreur lors du test de connexion r√©elle:', error);
            this.testResults.push({
                test: 'Real Connection Test',
                status: '‚ùå ERREUR',
                details: `Exception: ${error.message}`,
                timestamp: new Date().toISOString()
            });
        } finally {
            this.cleanup();
        }
    }

    /**
     * √âtablissement de la connexion WebSocket
     */
    async establishConnection() {
        return new Promise((resolve, reject) => {
            console.log('üîå Tentative de connexion WebSocket...');
            
            try {
                this.socket = new WebSocket(this.backendUrl);
                
                this.socket.onopen = () => {
                    console.log('‚úÖ Connexion WebSocket √©tablie');
                    this.connectionEstablished = true;
                    this.testResults.push({
                        test: 'WebSocket Connection',
                        status: '‚úÖ SUCC√àS',
                        details: 'Connexion √©tablie avec le backend',
                        timestamp: new Date().toISOString()
                    });
                    resolve();
                };
                
                this.socket.onerror = (error) => {
                    console.error('‚ùå Erreur de connexion WebSocket:', error);
                    this.testResults.push({
                        test: 'WebSocket Connection',
                        status: '‚ùå √âCHEC',
                        details: 'Impossible de se connecter au backend',
                        timestamp: new Date().toISOString()
                    });
                    reject(new Error('Connexion WebSocket √©chou√©e'));
                };
                
                this.socket.onclose = () => {
                    console.log('üîå Connexion WebSocket ferm√©e');
                    this.connectionEstablished = false;
                };
                
                this.socket.onmessage = (event) => {
                    this.handleServerMessage(event.data);
                };
                
                // Timeout de connexion
                setTimeout(() => {
                    if (!this.connectionEstablished) {
                        reject(new Error('Timeout de connexion WebSocket'));
                    }
                }, 5000);
                
            } catch (error) {
                reject(error);
            }
        });
    }

    /**
     * Test d'authentification avec les utilisateurs seed√©s
     */
    async testAuthentication() {
        if (!this.connectionEstablished) {
            throw new Error('Connexion WebSocket non √©tablie');
        }
        
        console.log('üë§ Test d\'authentification...');
        
        // Message d'authentification Hermas
        const authMessage = {
            type: 'AUTH',
            userId: this.herm√°sUserId,
            token: 'test-token-hermas-' + Date.now()
        };
        
        return new Promise((resolve) => {
            this.socket.send(JSON.stringify(authMessage));
            
            setTimeout(() => {
                console.log('‚úÖ Message d\'authentification envoy√©');
                this.testResults.push({
                    test: 'Authentication',
                    status: '‚úÖ SUCC√àS',
                    details: `Authentification tent√©e pour userId: ${this.herm√°sUserId}`,
                    timestamp: new Date().toISOString()
                });
                resolve();
            }, 1000);
        });
    }

    /**
     * Test des corrections avec donn√©es r√©elles
     */
    async testRealCorrections() {
        console.log('üîß Test des corrections avec connexion r√©elle...');
        
        // Test Correction 1: Join RTA avec h√©ros r√©els du seeder
        const rtaJoinMessage = {
            type: 'RTA_JOIN',
            userId: this.herm√°sUserId,
            selectedHeroes: [0, 1, 5, 3], // Hwayoung, Ml Piera, Ylinav, Krau (seeder exact)
            ready: true
        };
        
        this.socket.send(JSON.stringify(rtaJoinMessage));
        console.log('üì® Message RTA_JOIN envoy√© avec h√©ros du seeder');
        
        // Test Correction 2: Message avec userId manquant (sera corrig√© c√¥t√© serveur)
        const invalidMessage = {
            type: 'RTA_ACTION',
            // userId intentionnellement manquant
            battleId: 'test-battle-' + Date.now(),
            skillId: 'skill-1',
            targetId: 'enemy-hero-1'
        };
        
        setTimeout(() => {
            this.socket.send(JSON.stringify(invalidMessage));
            console.log('üì® Message avec userId manquant envoy√© (test correction 2)');
        }, 1000);
        
        // Test Correction 3: Simulation de reconnexion
        setTimeout(() => {
            console.log('üîÑ Test de reconnexion automatique...');
            this.testReconnectionScenario();
        }, 2000);
        
        return new Promise((resolve) => {
            setTimeout(() => {
                this.testResults.push({
                    test: 'Real Corrections Test',
                    status: '‚úÖ SUCC√àS',
                    details: 'Messages de test des corrections envoy√©s',
                    timestamp: new Date().toISOString()
                });
                resolve();
            }, 3000);
        });
    }

    /**
     * Test de reconnexion
     */
    async testReconnection() {
        console.log('üîÑ Test de d√©connexion/reconnexion...');
        
        if (this.socket && this.connectionEstablished) {
            this.socket.close();
            console.log('üîå Connexion ferm√©e pour test de reconnexion');
            
            // Attendre puis reconnecter
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            try {
                await this.establishConnection();
                console.log('‚úÖ Reconnexion r√©ussie');
                this.testResults.push({
                    test: 'Reconnection Test',
                    status: '‚úÖ SUCC√àS',
                    details: 'D√©connexion et reconnexion r√©ussies',
                    timestamp: new Date().toISOString()
                });
            } catch (error) {
                console.error('‚ùå √âchec de reconnexion:', error);
                this.testResults.push({
                    test: 'Reconnection Test',
                    status: '‚ùå √âCHEC',
                    details: 'Reconnexion √©chou√©e',
                    timestamp: new Date().toISOString()
                });
            }
        }
    }

    /**
     * Sc√©nario de test de reconnexion
     */
    testReconnectionScenario() {
        // Simulation d'une d√©connexion inattendue
        if (this.socket) {
            console.log('üîß Simulation d√©connexion inattendue...');
            this.socket.close();
            
            // Tentative de reconnexion automatique apr√®s 1 seconde
            setTimeout(() => {
                console.log('üîÑ Tentative de reconnexion automatique...');
                this.establishConnection().catch(error => {
                    console.error('‚ùå Reconnexion automatique √©chou√©e:', error);
                });
            }, 1000);
        }
    }

    /**
     * Gestionnaire des messages du serveur
     */
    handleServerMessage(data) {
        try {
            const message = JSON.parse(data);
            console.log('üì® Message re√ßu du serveur:', message.type);
            
            switch (message.type) {
                case 'AUTH_SUCCESS':
                    console.log('‚úÖ Authentification r√©ussie');
                    break;
                case 'AUTH_FAILED':
                    console.log('‚ùå Authentification √©chou√©e');
                    break;
                case 'RTA_JOINED':
                    console.log('‚úÖ Rejoint RTA avec succ√®s');
                    break;
                case 'BATTLE_START':
                    console.log('‚öîÔ∏è Combat commenc√©:', message.battleId);
                    break;
                case 'TURN_UPDATE':
                    console.log('üîÑ Mise √† jour de tour:', message.currentTurn);
                    break;
                case 'ERROR':
                    console.log('‚ö†Ô∏è Erreur serveur:', message.details);
                    break;
                default:
                    console.log('üì® Message non reconnu:', message.type);
            }
            
        } catch (error) {
            console.error('‚ùå Erreur parsing message serveur:', error);
        }
    }

    /**
     * Affichage des r√©sultats
     */
    displayResults() {
        const testDuration = ((Date.now() - this.testStartTime) / 1000).toFixed(2);
        
        console.log('\n' + '='.repeat(70));
        console.log('üåê R√âSULTATS DES TESTS DE CONNEXION R√âELLE RTA');
        console.log('='.repeat(70));
        
        let successCount = this.testResults.filter(r => r.status.includes('SUCC√àS')).length;
        let failCount = this.testResults.filter(r => r.status.includes('√âCHEC')).length;
        let errorCount = this.testResults.filter(r => r.status.includes('ERREUR')).length;
        let totalTests = this.testResults.length;
        
        this.testResults.forEach(result => {
            console.log(`\n${result.status} ${result.test}`);
            console.log(`   ${result.details}`);
            console.log(`   Timestamp: ${result.timestamp}`);
        });
        
        console.log('\n' + '-'.repeat(70));
        console.log(`üìä STATISTIQUES:`);
        console.log(`   Dur√©e des tests: ${testDuration}s`);
        console.log(`   Total des tests: ${totalTests}`);
        console.log(`   ‚úÖ Succ√®s: ${successCount}`);
        console.log(`   ‚ùå √âchecs: ${failCount}`);
        console.log(`   üö® Erreurs: ${errorCount}`);
        
        const successRate = totalTests > 0 ? Math.round((successCount / totalTests) * 100) : 0;
        console.log(`   üìä Taux de r√©ussite: ${successRate}%`);
        
        let evaluation = '';
        if (successRate >= 80) {
            evaluation = 'üéâ EXCELLENT: Connexion RTA r√©elle fonctionnelle !';
        } else if (successRate >= 60) {
            evaluation = '‚ö†Ô∏è CORRECT: Connexion r√©elle avec am√©liorations possibles';
        } else {
            evaluation = '‚ùå PROBL√àME: Connexion r√©elle n√©cessite des corrections';
        }
        
        console.log('\n' + evaluation);
        console.log('='.repeat(70));
    }

    /**
     * Nettoyage des ressources
     */
    cleanup() {
        if (this.socket && this.connectionEstablished) {
            this.socket.close();
            console.log('üßπ Connexion WebSocket ferm√©e');
        }
        console.log('üßπ Nettoyage termin√©');
    }
}

// Test avec v√©rification pr√©alable du serveur
async function runRealConnectionTests() {
    console.log('üöÄ Lancement du test de connexion r√©elle RTA');
    console.log('‚ö†Ô∏è  Assurez-vous que le serveur backend est d√©marr√© (port 8080)');
    
    // V√©rification que WebSocket est disponible
    if (typeof WebSocket === 'undefined') {
        console.error('‚ùå WebSocket non disponible dans cet environnement');
        console.log('üí° Utilisez ce script dans un navigateur ou avec Node.js + ws');
        return;
    }
    
    const tester = new RealRtaConnectionTest();
    await tester.runRealConnectionTest();
}

// Export pour utilisation externe
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { RealRtaConnectionTest, runRealConnectionTests };
}

// Auto-ex√©cution si dans un navigateur
if (typeof window !== 'undefined') {
    window.RealRtaConnectionTest = RealRtaConnectionTest;
    window.runRealConnectionTests = runRealConnectionTests;
    console.log('üåê Test de connexion RTA r√©elle charg√©');
    console.log('üí° Utilisez runRealConnectionTests() pour lancer le test');
}

// Auto-ex√©cution si script Node.js
if (typeof require !== 'undefined' && require.main === module) {
    console.log('‚ö†Ô∏è  Ce script n√©cessite WebSocket. Installez "ws" avec npm install ws');
    console.log('üí° Ou utilisez-le dans un navigateur avec le serveur backend d√©marr√©');
}
