package com.epic7.backend.service;

import com.epic7.backend.model.*;
import com.epic7.backend.model.enums.Rarity;
import com.epic7.backend.repository.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Optional;

/**
 * Service de gestion des invocations de h√©ros dans le jeu.
 * 
 * Ce service g√®re les invocations de h√©ros, y compris la v√©rification des
 * banni√®res actives,
 * la probabilit√© d'invocation en fonction de la raret√© du h√©ros et la mise √†
 * jour des diamants du joueur.
 * @author hermas
 */
@Service
public class SummonService {

    public static final int SUMMON_COST = 50; // Co√ªt d'une invocation en diamants

    private final PlayerHeroRepository playerHeroRepository; 
    private final BannerRepository bannerRepository;

    /**
     * Constructeur du service d'invocation.
     * @param heroRepository         Le d√©p√¥t de h√©ros pour acc√©der aux donn√©es des h√©ros.
     * @param playerHeroRepository   Le d√©p√¥t de h√©ros du joueur pour g√©rer les h√©ros du joueur.
     * @param bannerRepository       Le d√©p√¥t de banni√®res pour acc√©der aux donn√©es des banni√®res.
     */ 
    public SummonService(HeroRepository heroRepository,
            PlayerHeroRepository playerHeroRepository,
            BannerRepository bannerRepository) {
        this.playerHeroRepository = playerHeroRepository;
        this.bannerRepository = bannerRepository;
    }

    /**
     * R√©cup√®re la banni√®res actives actuelles.
     * @return Les banni√®res actives actuelles, ou une valeur vide si aucune banni√®re n'est active.
     */
    @Transactional(readOnly = true)
    public ArrayList<Banner> getActiveBanner() {
        Instant now = Instant.now();
        System.out.println("Current time: " + now);
        System.out.println("Active banners: " + bannerRepository.findAllByStartsAtBeforeAndEndsAtAfterOrderByStartsAtDesc(now, now));

        System.out.println("est ce que ca marche ? üöÄ");
        return bannerRepository.findAllByStartsAtBeforeAndEndsAtAfterOrderByStartsAtDesc(now, now);
    }

    /**
     * R√©cup√®re la probabilit√© d'invocation en fonction de la raret√© du h√©ros.
     * @param rarity La raret√© du h√©ros.
     * @return La probabilit√© d'invocation pour cette raret√©.
     */
    private double getProbabilityByRarity(Rarity rarity) {
        return switch (rarity) {
            case NORMAL -> 0.68;
            case RARE -> 0.20;
            case EPIC -> 0.10;
            case LEGENDARY -> 0.02;
            default -> 0.0;
        };
    }

    /**
     * Effectue une invocation de h√©ros pour un utilisateur donn√©.
     * @param user L'utilisateur effectuant l'invocation.
     * @param banner La banni√®re d'invocation.
     * @return Un objet PlayerHero si l'invocation a r√©ussi, sinon une valeur vide.
     */
    @Transactional
    public Optional<PlayerHero> performSummon(User user,Banner banner) {
        // V√©rifier si l'utilisateur poss√®de tous les h√©ros de la banni√®re
        if (userOwnsAllHeroesInBanner(user, banner)) {
            return Optional.empty();
        }
        // V√©rifier si l'utilisateur a suffisamment de diamants
        if (user.getDiamonds() < SUMMON_COST) {
            return Optional.empty();
        }
        // Lui faire payer
        user.setDiamonds(user.getDiamonds() - SUMMON_COST);
        // Parcourir les h√©ros de la banni√®re active
        for (Hero hero : banner.getFeaturedHeroes()) {
            // V√©rifier si l'utilisateur poss√®de d√©j√† ce h√©ros
            boolean alreadyOwned = playerHeroRepository.existsByUserAndHero(user, hero);
            if (alreadyOwned) {
                continue; // Passer au h√©ros suivant
            }

            // Calculer la probabilit√© d'invocation
            double probability = getProbabilityByRarity(hero.getRarity());
            double draw = Math.random();

            if (draw < probability) {
                // Ajouter le h√©ros √† l'utilisateur
                PlayerHero playerHero = new PlayerHero(user, hero);
                user.getOwnedHeroes().add(playerHero);
                return Optional.of(playerHero);
            }
        }
        return Optional.empty();
    }
    /**
     * V√©rifie si l'utilisateur poss√®de tous les h√©ros de la banni√®re.
     * @param user   L'utilisateur √† v√©rifier.
     * @param banner La banni√®re √† v√©rifier.
     * @return true si l'utilisateur poss√®de tous les h√©ros de la banni√®re, false sinon.
     */
    @Transactional(readOnly = true)
    public boolean userOwnsAllHeroesInBanner(User user, Banner banner) {

        // V√©rifier si l'utilisateur poss√®de chaque h√©ros de la banni√®re
        for (Hero hero : banner.getFeaturedHeroes()) {
            boolean ownsHero = playerHeroRepository.existsByUserAndHero(user, hero);
            if (!ownsHero) {
                return false; // Si un h√©ros n'est pas poss√©d√©, retourner false
            }
        }

        return true; // Si tous les h√©ros sont poss√©d√©s, retourner true
    }
    /**
     * R√©cup√®re un h√©ros sp√©cifique par son ID.
     * @param heroId L'ID d'une banni√®re √† r√©cup√©rer.
     * @return Un objet Banner si trouv√©, sinon une valeur vide.
     */
    @Transactional(readOnly = true)
    public Optional<Banner> getBannerById(Long bannerId) {
        return bannerRepository.findById(bannerId);
    }
}