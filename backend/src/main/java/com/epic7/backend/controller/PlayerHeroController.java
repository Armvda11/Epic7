package com.epic7.backend.controller;

import com.epic7.backend.dto.PlayerHeroViewDTO;
import com.epic7.backend.dto.SkillDTO;
import com.epic7.backend.repository.model.Hero;
import com.epic7.backend.repository.model.PlayerHero;
import com.epic7.backend.repository.model.Skill;
import com.epic7.backend.repository.model.User;
import com.epic7.backend.service.AuthService;
import com.epic7.backend.service.PlayerHeroService;
import com.epic7.backend.service.SkillService;
import com.epic7.backend.utils.JwtUtil;
import jakarta.servlet.http.HttpServletRequest;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

/**
 * Contr√¥leur REST pour g√©rer les h√©ros poss√©d√©s par un joueur (PlayerHero).
 */
@RestController
@RequestMapping("/api/player-hero")
public class PlayerHeroController {

    private final JwtUtil jwtUtil;
    private final AuthService authService;
    private final PlayerHeroService playerHeroService;

    private final SkillService skillService;

    /**
     * Constructeur de PlayerHeroController.
     * @param jwtUtil
     * @param authService
     * @param playerHeroService
     * @param skillService
     */
    public PlayerHeroController(JwtUtil jwtUtil, AuthService authService, PlayerHeroService playerHeroService,
            SkillService skillService) {
        this.jwtUtil = jwtUtil;
        this.authService = authService;
        this.playerHeroService = playerHeroService;
        this.skillService = skillService;
    }

    /**
     * R√©cup√®re l'utilisateur actuel √† partir du token JWT dans la requ√™te.
     * @param request Requ√™te HTTP contenant le token JWT
     * @return        L'utilisateur actuel
     */
    private User getCurrentUser(HttpServletRequest request) {
        String token = jwtUtil.extractTokenFromHeader(request);
        String email = jwtUtil.extractEmail(token);
        return authService.getUserByEmail(email);
    }

    /**
     * Gagne de l'exp√©rience pour un h√©ros sp√©cifique du joueur.
     * 
     * @param heroId ID du h√©ros joueur (PlayerHero)
     * @param amount Quantit√© d'exp√©rience √† ajouter
     */
    @PostMapping("/{heroId}/gain-xp")
    public ResponseEntity<String> gainExperience(@PathVariable Long heroId,
            @RequestParam int amount,
            HttpServletRequest request) {
        User user = getCurrentUser(request);
        Optional<PlayerHero> optionalHero = Optional.ofNullable(playerHeroService.findById(heroId));

        if (optionalHero.isEmpty()) {
            return ResponseEntity.badRequest().body("H√©ros non trouv√©.");
        }

        PlayerHero hero = optionalHero.get();

        if (!hero.getUser().getId().equals(user.getId())) {
            return ResponseEntity.status(403).body("Ce h√©ros ne vous appartient pas.");
        }

        try {
            playerHeroService.gainExperience(hero, amount);
            return ResponseEntity.ok("‚úÖ Exp√©rience ajout√©e. Niveau actuel : " + hero.getLevel());
        } catch (IllegalStateException e) {
            return ResponseEntity.badRequest().body("‚ùå " + e.getMessage());
        }
    }

    /**
     * Verrouille un h√©ros. Emp√™che la vente ou la suppression du h√©ros par le joueur.
     * @param heroId    ID du h√©ros √† verrouiller
     * @param request   Requ√™te HTTP contenant le token JWT
     * @return        R√©ponse HTTP indiquant le succ√®s ou l'√©chec de l'op√©ration
     */
    @PostMapping("/{heroId}/lock")
    public ResponseEntity<String> lockHero(@PathVariable Long heroId, HttpServletRequest request) {
        User user = getCurrentUser(request);
        Optional<PlayerHero> optionalHero = Optional.ofNullable(playerHeroService.findById(heroId));

        if (optionalHero.isEmpty()) {
            return ResponseEntity.badRequest().body("H√©ros non trouv√©.");
        }

        PlayerHero hero = optionalHero.get();
        if (!hero.getUser().getId().equals(user.getId())) {
            return ResponseEntity.status(403).body("Ce h√©ros ne vous appartient pas.");
        }

        playerHeroService.lockHero(hero);
        return ResponseEntity.ok("üîí H√©ros verrouill√©.");
    }

    /**
     * D√©verrouille un h√©ros.
     */
    @PostMapping("/{heroId}/unlock")
    public ResponseEntity<String> unlockHero(@PathVariable Long heroId, HttpServletRequest request) {
        User user = getCurrentUser(request);
        Optional<PlayerHero> optionalHero = Optional.ofNullable(playerHeroService.findById(heroId));

        if (optionalHero.isEmpty()) {
            return ResponseEntity.badRequest().body("H√©ros non trouv√©.");
        }

        PlayerHero hero = optionalHero.get();
        if (!hero.getUser().getId().equals(user.getId())) {
            return ResponseEntity.status(403).body("Ce h√©ros ne vous appartient pas.");
        }

        playerHeroService.unlockHero(hero);
        return ResponseEntity.ok("üîì H√©ros d√©verrouill√©.");
    }

    /**
     * R√©cup√®re tous les h√©ros du joueur actuel.
     * @param request
     * @return
     */
    @GetMapping("/my")
    public ResponseEntity<List<PlayerHeroViewDTO>> getMyHeroes(HttpServletRequest request) {
        User user = getCurrentUser(request);
        List<PlayerHero> heroes = playerHeroService.getAllByUser(user);
        List<PlayerHeroViewDTO> result = heroes.stream()
                .map(playerHeroService::buildPlayerHeroViewDTO)
                .toList();
        return ResponseEntity.ok(result);
    }

    /**
     * R√©cup√®re les comp√©tences d'un h√©ros sp√©cifique du joueur.
     * @param playerHeroId
     * @param request
     * @return
     */
    @GetMapping("/{playerHeroId}/skills")
    public ResponseEntity<List<SkillDTO>> getSkillsForPlayerHero(@PathVariable Long playerHeroId,
            HttpServletRequest request) {
        List<Skill> skills = skillService.getSkillsByHeroId(playerHeroId);
        return ResponseEntity.ok(skills.stream().map(skillService::toDTO).toList());
    }


    /**
     * R√©cup√®re le mod√®le de h√©ros d'origine pour un h√©ros sp√©cifique du joueur.
     * @param playerHeroId
     * @param request
     * @return
     */
    @GetMapping("/{playerHeroId}/hero")
    public ResponseEntity<Hero> getOriginalHeroModel(@PathVariable Long playerHeroId, HttpServletRequest request) {
        User user = getCurrentUser(request);
        PlayerHero playerHero = playerHeroService.findById(playerHeroId);

        if (playerHero == null || !playerHero.getUser().getId().equals(user.getId())) {
            return ResponseEntity.status(403).build();
        }

        return ResponseEntity.ok(playerHero.getHero());
    }

    @GetMapping("/user")
    public ResponseEntity<List<PlayerHeroViewDTO>> getUserHeroes(@RequestParam Long userId) {
        try {
            List<PlayerHero> playerHeroes = playerHeroService.getAllByUserId(userId);
            List<PlayerHeroViewDTO> userHeroes = playerHeroes.stream()
                    .map(playerHeroService::buildPlayerHeroViewDTO)
                    .toList();
            return ResponseEntity.ok(userHeroes);
        } catch (Exception e) {
            System.err.println("Erreur lors de la r√©cup√©ration des h√©ros de l'utilisateur : " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

}
